name: Validate gentx PR
# Updated to trigger validation for existing PRs

on:
  pull_request:
    paths:
      - "mainnet/gentx/**.json"   # run only when gentx files change
      - ".github/workflows/**"    # …or the workflow itself
  workflow_dispatch:              # allow manual triggering
    inputs:
      pr_number:
        description: 'PR number to validate (optional)'
        required: false
        type: string

jobs:
  validate-gentx:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # we need full history for diffs

      - name: Checkout PR if specified
        if: github.event.inputs.pr_number
        run: |
          gh pr checkout ${{ github.event.inputs.pr_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for gentx files
        run: |
          if [ ! -d "mainnet/gentx" ] || [ -z "$(ls -A mainnet/gentx/*.json 2>/dev/null)" ]; then
            echo "No gentx files found in mainnet/gentx/ directory"
            echo "This workflow validates gentx files in PRs that add files to mainnet/gentx/"
            exit 0
          fi
          echo "Found gentx files to validate:"
          ls -la mainnet/gentx/*.json

      - name: Install tooling (jq + lumerad)
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq curl
          curl -L \
            https://github.com/LumeraProtocol/lumera/releases/download/v1.1.0/lumera_v1.1.0_linux_amd64.tar.gz \
            -o lumera_v1.1.0_linux_amd64.tar.gz
          tar -xzf lumera_v1.1.0_linux_amd64.tar.gz
          chmod +x lumerad
          sudo mv lumerad /usr/local/bin/
          sudo mv libwasmvm.x86_64.so /usr/local/lib/
          sudo ldconfig

      - name: Run CI validation script
        id: validation
        run: |
          echo "Running gentx validation..."
          if bash scripts/ci/validate_gentx.sh > validation_output.txt 2>&1; then
            echo "validation_status=success" >> $GITHUB_OUTPUT
            echo "Validation completed successfully!" >> validation_output.txt
          else
            echo "validation_status=failure" >> $GITHUB_OUTPUT
            echo "Validation failed!" >> validation_output.txt
          fi
          
          # Prepare comment body
          echo "## 🔍 Gentx Validation Results" > comment_body.txt
          echo "" >> comment_body.txt
          if [ "$(cat $GITHUB_OUTPUT | grep validation_status=success)" ]; then
            echo "✅ **Status: PASSED**" >> comment_body.txt
          else
            echo "❌ **Status: FAILED**" >> comment_body.txt
          fi
          echo "" >> comment_body.txt
          echo "### Validation Output:" >> comment_body.txt
          echo '```' >> comment_body.txt
          cat validation_output.txt >> comment_body.txt
          echo '```' >> comment_body.txt
          echo "" >> comment_body.txt
          echo "_Validation run at $(date)_" >> comment_body.txt

      - name: Comment on PR (manual trigger)
        if: github.event.inputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('comment_body.txt', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.pr_number }},
              body: commentBody
            });

      - name: Comment on PR (automatic trigger)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('comment_body.txt', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Set job status based on validation
        run: |
          if [ "${{ steps.validation.outputs.validation_status }}" = "failure" ]; then
            exit 1
          fi
